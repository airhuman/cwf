# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := gtest
DEFS_Default := \
	'-DGTEST_HAS_RTTI=0'

# Flags passed to all source files.
CFLAGS_Default := \
	-fasm-blocks \
	-mpascal-strings \
	-Os \
	-gdwarf-2 \
	-arch i386

# Flags passed to only C files.
CFLAGS_C_Default :=

# Flags passed to only C++ files.
CFLAGS_CC_Default :=

# Flags passed to only ObjC files.
CFLAGS_OBJC_Default :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Default :=

INCS_Default := \
	-I../src/testing/gtest \
	-I../src/testing/gtest/include

OBJS := \
	$(obj).target/$(TARGET)/../src/testing/gtest/src/gtest-death-test.o \
	$(obj).target/$(TARGET)/../src/testing/gtest/src/gtest-filepath.o \
	$(obj).target/$(TARGET)/../src/testing/gtest/src/gtest-port.o \
	$(obj).target/$(TARGET)/../src/testing/gtest/src/gtest-printers.o \
	$(obj).target/$(TARGET)/../src/testing/gtest/src/gtest-test-part.o \
	$(obj).target/$(TARGET)/../src/testing/gtest/src/gtest-typed-test.o \
	$(obj).target/$(TARGET)/../src/testing/gtest/src/gtest.o \
	$(obj).target/$(TARGET)/../src/testing/multiprocess_func_list.o \
	$(obj).target/$(TARGET)/../src/testing/gtest_mac.o \
	$(obj).target/$(TARGET)/../src/testing/platform_test_mac.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD
	@$(call do_cmd,objcxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD
	@$(call do_cmd,objcxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.mm FORCE_DO_CMD
	@$(call do_cmd,objcxx,1)

# End of this set of suffix rules
### Rules for final target.
